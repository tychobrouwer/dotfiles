;; Bar Widget
(defwidget bar []
  (centerbox :orientation "h"
    (left)
    (music)
    (right)))

(defwidget right []
  (box :class "right" :orientation "h" :space-evenly false :halign "end"
    (button
      :onclick "wpctl set-mute @DEFAULT_AUDIO_SOURCE@ toggle"
      (box
        :class {mutedmic == "true" ? "mutedmic bar-item" : "unmutedmic bar-item"}
      {mutedmic == "true" ? "" : ""})
    )
    (metric
      :parent_class "bar-item"
      :class {
      volume == "" ? "volume0"
      : volume == 0 ? "volume0"
      : volume < 25 ? "volume25"
      : volume < 50 ? "volume50"
      : volume < 75 ? "volume75"
      : "volume100"
      }
      :label {volume == "" ? "" : volume == 0 ? "": volume < 25 ? "" : volume < 50 ? "" : volume < 75 ? "" : ""}
      :value volume
      :onchange "wpctl set-volume @DEFAULT_AUDIO_SINK@ {}% --limit 1.0"
      :onclick "wpctl set-mute @DEFAULT_AUDIO_SINK@ toggle"
    )
    (metric
      :parent_class "bar-item"
      :class {
      batery == "" ? "${batery_status} batery0"
      : batery == 0 ? "${batery_status} batery0"
      : batery < 25 ? "${batery_status} batery25"
      : batery < 50 ? "${batery_status} batery50"
      : batery < 75 ? "${batery_status} batery75"
      : "${batery_status} batery100"
      }
      :label {batery == "" ? "" : batery_status == "Charging" ? "" : batery == 0 ? "": batery < 25 ? "" : batery < 50 ? "" : batery < 75 ? "" : ""}
      :value batery
      :onchange ""
      :onclick ""
    )
    (memory :class "bar-item")
    (disk :class "bar-item")
    (power :class "bar-item")
  ))

(defwidget left []
  (box :class "left" :orientation "h" :space-evenly false :halign "start"
    (workspaces :class "bar-item")
    (box :class "time bar-item" time)
  ))


;; Workspaces
(defwidget workspaces [class]
  (box :class "workspaces ${class}"
    :orientation "h"
    :space-evenly true
    :spacing 10
    (for i in workspaces
      (button :class {activeworkspace == i ? "activeworkspace" : ""}
        :onclick "hyprctl dispatch focusworkspaceoncurrentmonitor ${i}"
        ""
      )
    )
  )
)

;; Music Bar
(defwidget music []
  (eventbox :class "music ${UPDATE}"
    :halign "center"
    :onclick "eww open music_widget --toggle --screen 0"
    {SUMMARY != "" ? "${SUMMARY}" : ""}
  ))

;; Power
(defwidget power [class]
  (eventbox	:onhover "eww update power=true"
    :onhoverlost "eww update power=false"
    (box
      :orientation "h"
      :space-evenly "false"
      :hexpand "false"
      :class "powermenu ${class}"
      (revealer	:transition "slideleft"
        :reveal power
        :duration "550ms"
        (box		:orientation "h"
          :space-evenly "false"
          
          (button :class "button-suspend"
          :onclick "eww open confirmation && eww update confirm_action='systemctl suspend'" "")
          
          (button :class "button-reboot"
          :onclick "eww open confirmation && eww update confirm_action='systemctl reboot'" "")
          
          (button :class "button-logout"
          :onclick "hyprctl dispatch exit" "")
          
          (button :class "button-lock"
          :onclick "bash -c \"eval 'hyprlock --config $HOME/.config/hypr/hyprlock.conf'\"" "")))
      
      (button		:class "button-off"
      :onclick "eww open confirmation && eww update confirm_action='systemctl poweroff'" ""))))

;; Memory
(defwidget memory [class]
  (box
    :orientation "h"
    :class "memory ${class}"
    " ${round(EWW_RAM.used_mem / 1000000000, 1)}GB"))

;; Disk
(defwidget disk [class]
  (box
    :orientation "h"
    :class "disk ${class}"
    " ${round(EWW_DISK["/"].used / 1000000000, 1)}GB"))

;; Metric Template
(defwidget metric [parent_class class label value onchange onclick]
  (box :orientation "h"
    :class "metric ${class}-container ${parent_class}"
    :space-evenly false
    (eventbox
      :onclick onclick
      (box :class class label))
    (scale :min 0
      :max 101
      :active {onchange != ""}
      :value {value != "" ? value : 0}
      :onchange onchange
    )))

;; Music Widget
(defwidget music_widget []
  (box :class "music_window ${UPDATE}" :orientation "h" :space-evenly "false" :vexpand "false" :hexpand "false"
    (box :class "album_art" :vexpand "false" :hexpand "false" :style "background-image: url('${COVER}');")
    (box :orientation "v" :spacing 0 :space-evenly "false" :vexpand "false" :hexpand "true"
      (label :halign "center" :class "song" :wrap "true" :limit-width 20 :text SONG)
      (label :halign "center" :class "artist" :wrap "true" :limit-width 15 :text ARTIST)
      (box :orientation "h" :spacing 20 :halign "center" :space-evenly "true" :vexpand "false" :hexpand "false"
        (button :class "btn_prev" :timeout "1s" :onclick "playerctl previous" "")
        (button :class "btn_play" :timeout "1s" :onclick "playerctl play-pause" STATUS)
        (button :class "btn_next" :timeout "1s" :onclick "playerctl next" ""))
      (box :class "music_bar" :halign "center" :vexpand "false" :hexpand "false"
        (scale :min 0 :active "true" :max 100 :value {CURRENT != "" ? CURRENT : 0})))))

;; Confirmation Widget
(defwidget confirmation []
  (box :orientation "v" :class "confirm-box"
    (label :class "confirm-text" :text "Are you sure?")
    (box :orientation "h"
      (button :class "confirm-yes"
        :width 100
        :onclick "eww close confirmation && bash -c \"eval ${confirm_action}\""
      "✔ Yes")
      (button :class "confirm-no"
        :width 100
        :onclick "eww close confirmation"
      "✖ No"))))

;; Confirm action command
(defvar confirm_action "")

;; Power menu visibility
(defvar power false)

;; Music vars
(defpoll UPDATE :interval "30s" "scripts/music-info-playerctl.sh --update")
(defpoll SONG :interval "0.5s" "scripts/music-info-playerctl.sh --song")
(defpoll ARTIST :interval "0.5s" "scripts/music-info-playerctl.sh --artist")
(defpoll STATUS :interval "0.5s" "scripts/music-info-playerctl.sh --status")
(defpoll SUMMARY :interval "0.5s" "scripts/music-info-playerctl.sh --summary")
(defpoll CURRENT :interval "1s" "scripts/music-info-playerctl.sh --time")
(defpoll COVER :interval "0.5s" "scripts/music-info-playerctl.sh --cover")

(defpoll volume :interval "0.1s"
"scripts/get-volume.sh")

(defpoll batery :interval "30"
"scripts/get-batery.sh")
(defpoll batery_status :interval "10"
"scripts/get-batery-status.sh")

(defpoll mutedmic :interval "0.1s"
"scripts/get-mute.sh")

(defpoll activeworkspace :interval "0.1s"
  "hyprctl activeworkspace | awk -F '[()]' '{print $2; exit}' | xargs")

(defpoll time :interval "10s"
"date '+%d %b %Y  %H:%M'")

(defvar workspaces "[1, 2, 3, 4, 5, 6, 7]")

(defwindow bar
  :monitor 0
  :exclusive true
  :focusable false
  :geometry (geometry :x "0%"
    :y "0%"
    :width "100%"
    :height "10px"
  :anchor "top center")
  (bar))

;; music
(defwindow music_widget
  :monitor 0
  :stacking "fg"
  :focusable false
  :geometry (geometry :x "50%" :y 5 :anchor "top center")
  (music_widget))

;; confirmation
(defwindow confirmation
  :monitor 0
  :stacking "overlay"
  :focusable true
  :geometry (geometry :x "50%" :y 5 :anchor "center top")
  (confirmation))
